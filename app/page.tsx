'use client'

import { useState, useEffect } from 'react';

// üéØ VOCABULAIRE TECHNIQUE COMPLET - TOUS LES MOTS DE VOTRE EXAMEN
const en_to_fr = {
  // Vocabulaire de base
  "Software": "Logiciel",
  "Specifications": "Cahier des charges",
  "Browser": "Navigateur",
  "Search engine": "Moteur de recherche",
  "Programming": "Programmation",
  "Domain name": "Nom de domaine",
  "Account": "Compte",
  "To sign up": "Cr√©er un compte",
  "To set a password": "D√©finir un mot de passe",
  "User": "Utilisateur",
  "Username": "Identifiant",
  "Library": "Biblioth√®que",
  
  // Vocabulaire technique avanc√©
  "Framework": "Cadre de travail",
  "Integrated development environment": "Environnement de d√©veloppement",
  "IDE": "Environnement de d√©veloppement",
  "Maintenance": "Maintenance",
  "Backup": "Sauvegarde",
  "Database": "Base de donn√©es",
  "Data flow": "Flux de donn√©es",
  "Data storage": "Stockage de donn√©es",
  "Firewall": "Pare-feu",
  "Spyware": "Logiciel espion",
  "Bandwidth": "Bande passante",
  "Application Programming Interface": "Interface de programmation",
  "API": "Interface de programmation",
  "Markup": "Balise",
  "Binary language": "Langage binaire",
  "Content management system": "Syst√®me de gestion de contenu",
  "CMS": "Syst√®me de gestion de contenu",
  "Server": "Serveur",
  "Host": "Serveur",
  "Hosting service": "Service d'h√©bergement",
  "Sitemap": "Plan de site",
  "Arborescence": "Plan de site",
  "Static site": "Site statique",
  "Dynamic site": "Site dynamique",
  "Animated site": "Site anim√©",
  "Redesign": "Refonte",
  "Graphic charter": "Charte graphique",
  "Banner": "Banni√®re",
  "Referencing": "R√©f√©rencement",
  "Search Engine Optimization": "Optimisation pour les moteurs de recherche",
  "SEO": "Optimisation pour les moteurs de recherche",
  "Search Engine Advertising": "R√©f√©rencement payant",
  "SEA": "R√©f√©rencement payant",
  "Spamdexing": "R√©f√©rencement abusif",
  "Social Network": "R√©seau Social",
  "File Transfer Protocol": "Protocole de transfert de fichier",
  "File transfer": "Transfert de fichier",
  "File sharing": "Partage de fichier",
  "To download": "T√©l√©charger",
  "Virtual visit": "Visite virtuelle",
  "Interactive object": "Objet interactif",
  "Graphic user interface": "Interface utilisateur graphique",
  "Mock-up": "Prototype d'interface utilisateur",
  "User experience": "Exp√©rience utilisateur",
  "Wireframe": "Maquette fonctionnelle d'un site"
};

// üöÄ EXPRESSIONS PROFESSIONNELLES COMPL√àTES - TOUTES LES 50 EXPRESSIONS
const expressions_en_to_fr = {
  // Expressions m√©tier - niveau interm√©diaire (TOUTES les 50)
  "Declare a variable in java language": "D√©clarer une variable en langage java",
  "Use arrays to store multiple values in a single variable": "Utiliser des tableaux pour stocker plusieurs valeurs dans une seule variable",
  "Create a string in java": "Cr√©er une cha√Æne en java",
  "Execute loops": "Ex√©cuter des boucles",
  "Perform an input or output operation": "Effectuer une op√©ration d'entr√©e ou de sortie",
  "Process a binary information": "Traiter une information repr√©sent√©e sous sa forme binaire",
  "Understand the main deliverables, milestones, as well as the roles and responsibilities of each person involved in a project charter": "Comprendre les principaux livrables, les jalons, ainsi que les r√¥les et les responsabilit√©s de chaque personne impliqu√©e dans une charte de projet",
  "Use Boolean operators to narrow, expand, or refine search results": "Utiliser les op√©rateurs bool√©ens pour r√©duire, √©tendre ou affiner les r√©sultats de recherche",
  "Create a stored procedure in a database": "Cr√©er une proc√©dure stock√©e dans une base de donn√©es",
  "Use the most efficient algorithms possible to solve problems": "Utiliser les algorithmes les plus efficaces possibles pour r√©soudre des probl√®mes",
  "Develop reliable and functional software solutions": "D√©velopper des solutions logicielles fiables et fonctionnelles",
  "Position oneself as a technical expert": "Se positionner comme expert technique",
  "Manage and optimize the database": "G√©rer et optimiser la base de donn√©es",
  "Conduct a software study": "R√©aliser une √©tude logicielle",
  "Design application architecture": "Concevoir l'architecture des applications",
  "Ensure data management": "Assurer la gestion des donn√©es",
  "Secure applications": "S√©curiser les applications",
  "Implement software solutions": "Impl√©menter des solutions logicielles",
  "Build programs": "Cr√©er des programmes",
  "Write and test code": "√âcrire et tester le code",
  "Collaborate with developers": "Collaborer avec des d√©veloppeurs",
  "Use development tools": "Utiliser des outils de d√©veloppement",
  "Create ergonomic applications": "Cr√©er des applications ergonomiques",
  "Listen, analyze and write needs": "√âcouter, analyser et r√©diger les besoins",
  "Guarantee the sustainability and evolution of solutions": "√ätre garant de la p√©rennit√© et de l'√©volution des solutions",
  "Meet deadlines, costs and quality": "Respecter les d√©lais, les co√ªts et la qualit√©",
  "Meet client expectations": "Satisfaire les attentes du client",
  "Lead a software engineering project": "Piloter un projet d'ing√©nierie logicielle",
  "Build specifications": "Construire un cahier des charges",
  "Manage company data": "G√©rer les donn√©es de l'entreprise",
  "Develop mobile apps": "D√©velopper des applications mobiles",
  "Support the company's strategy": "Accompagner la strat√©gie de l'entreprise",
  "Follow development principles and best practices": "Suivre les principes et bonnes pratiques de d√©veloppement",
  "Analyze and identify any potential problems": "Analyser et identifier tous les probl√®mes potentiels",
  "Improve and maintain the software in the long term": "Am√©liorer et maintenir le logiciel √† long terme",
  "Translate the client's need into functional demands": "Traduire le besoin du client en demandes fonctionnelles",
  "Analyze and describe the tasks to be performed by the computer": "Analyser et d√©crire les t√¢ches √† r√©aliser par l'ordinateur",
  "Determine and schematize the software functionalities": "D√©terminer et sch√©matiser les fonctionnalit√©s du logiciel",
  "Identify programming defects": "D√©celer les d√©fauts de programmation",
  "Perform batch processes": "Effectuer des traitements par lot",
  "Control developments and different versions of the software": "Contr√¥ler les √©volutions et les diff√©rentes versions du logiciel",
  "Keep the software in operational condition": "Maintenir en condition op√©rationnelle le logiciel",
  "Put into production at the end of the qualification and integration phases": "Mettre en production √† l'issue des phases de qualification et d'int√©gration",
  "Write the source code that forms the body of the software": "R√©diger le code source qui constitue le corps du logiciel",
  "Implement agility as part of a team of developers": "Mettre en ≈ìuvre l'agilit√© au sein d'une √©quipe de d√©veloppeurs",
  "Lead collaborative projects": "Diriger des projets collaboratifs",
  "Make sure the features offered by the software are in line with the customer's expectations": "V√©rifier que les fonctions offertes par le logiciel correspondent aux attentes du client",
  "Define key lifecycle milestones for the project": "D√©finir les √©tapes cl√©s de cycle de vie du projet",
  "Integrate development environments": "Int√©grer les environnements de d√©veloppement",
  "Manage changes to source code": "G√©rer les modifications apport√©es au code source",
  "Deploy the software to an application server": "D√©ployer le logiciel sur un serveur d'applications"
};

// Combine all dictionaries
const all_en_to_fr = { ...en_to_fr, ...expressions_en_to_fr };
const fr_to_en = Object.fromEntries(Object.entries(all_en_to_fr).map(([k, v]) => [v, k]));

// Quiz modes avec mode EXAMEN sp√©cial
const QUIZ_MODES = {
  basic: { name: "üî§ Vocabulaire de base", icon: "üìö", color: "bg-blue-500" },
  expressions: { name: "üíº Expressions pro", icon: "üöÄ", color: "bg-purple-500" },
  exam: { name: "üéì MODE EXAMEN", icon: "üìù", color: "bg-red-600" },
  mixed: { name: "üéØ Mode mixte", icon: "üé≤", color: "bg-green-500" },
  quick: { name: "‚ö° Mode rapide", icon: "‚è±Ô∏è", color: "bg-orange-500" },
  challenge: { name: "üèÜ Mode d√©fi", icon: "üî•", color: "bg-red-500" }
};

function shuffle(array: string[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

export default function Home() {
  const [gameState, setGameState] = useState<'menu' | 'playing' | 'finished'>('menu');
  const [selectedMode, setSelectedMode] = useState<keyof typeof QUIZ_MODES>('basic');
  const [words, setWords] = useState<string[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [correct, setCorrect] = useState(0);
  const [total, setTotal] = useState(0);
  const [result, setResult] = useState('');
  const [options, setOptions] = useState<string[]>([]);
  const [prompt, setPrompt] = useState('');
  const [answer, setAnswer] = useState('');
  const [streak, setStreak] = useState(0);
  const [maxStreak, setMaxStreak] = useState(0);
  const [timeLeft, setTimeLeft] = useState<number | null>(null);
  const [showHint, setShowHint] = useState(false);

  // Generate smart wrong options (TR√àS TRICKY pour l'examen !)
  const generateOptions = (correctAnswer: string, isEnglishToFrench: boolean): string[] => {
    const allValues = isEnglishToFrench ? Object.values(all_en_to_fr) : Object.keys(all_en_to_fr);
    
    // Pour le mode EXAMEN : options tr√®s similaires et difficiles !
    if (selectedMode === 'exam') {
      const trickyOptions: string[] = [];
      
      // Strat√©gie 1: Mots avec m√™me domaine s√©mantique
      const semanticGroups: { [key: string]: string[] } = {
        // Groupe base de donn√©es
        'database': ['Base de donn√©es', 'Sauvegarde', 'Stockage de donn√©es', 'Flux de donn√©es', 'G√©rer et optimiser la base de donn√©es'],
        'data': ['Data flow', 'Data storage', 'Database', 'Backup', 'Manage company data'],
        
        // Groupe d√©veloppement
        'development': ['Environnement de d√©veloppement', 'Outils de d√©veloppement', 'Cadre de travail', 'Int√©grer les environnements de d√©veloppement'],
        'develop': ['Develop mobile apps', 'Develop reliable and functional software solutions', 'Use development tools', 'Follow development principles and best practices'],
        
        // Groupe serveur/h√©bergement
        'server': ['Serveur', 'Service d\'h√©bergement', 'D√©ployer le logiciel sur un serveur d\'applications'],
        'host': ['Server', 'Hosting service', 'Deploy the software to an application server'],
        
        // Groupe interfaces
        'interface': ['Interface de programmation', 'Interface utilisateur graphique', 'Prototype d\'interface utilisateur'],
        'user': ['User', 'User experience', 'Graphic user interface', 'Utilisateur'],
        
        // Groupe r√©f√©rencement
        'seo': ['R√©f√©rencement', 'Optimisation pour les moteurs de recherche', 'R√©f√©rencement payant', 'R√©f√©rencement abusif'],
        'search': ['Search Engine Optimization', 'Search Engine Advertising', 'Search engine', 'Spamdexing'],
        
        // Groupe gestion de projet
        'project': ['Piloter un projet d\'ing√©nierie logicielle', 'Diriger des projets collaboratifs', 'D√©finir les √©tapes cl√©s de cycle de vie du projet'],
        'manage': ['Manage and optimize the database', 'Manage company data', 'Manage changes to source code', 'G√©rer et optimiser la base de donn√©es']
      };
      
      // Cherche le groupe s√©mantique de la bonne r√©ponse
      let relatedWords: string[] = [];
      for (const [group, words] of Object.entries(semanticGroups)) {
        if (words.some(word => word.toLowerCase().includes(correctAnswer.toLowerCase()) || correctAnswer.toLowerCase().includes(word.toLowerCase()))) {
          relatedWords = words.filter(w => w !== correctAnswer);
          break;
        }
      }
      
      // Strat√©gie 2: Mots avec pr√©fixes/suffixes similaires
      const similarWords = allValues.filter(word => {
        if (word === correctAnswer) return false;
        const correct = correctAnswer.toLowerCase();
        const candidate = word.toLowerCase();
        
        // M√™me longueur ¬±2 caract√®res
        if (Math.abs(correct.length - candidate.length) <= 2) return true;
        
        // M√™me pr√©fixe (3+ caract√®res)
        if (correct.length >= 3 && candidate.length >= 3 && 
            correct.substring(0, 3) === candidate.substring(0, 3)) return true;
            
        // M√™me suffixe (3+ caract√®res)
        if (correct.length >= 3 && candidate.length >= 3 && 
            correct.substring(correct.length - 3) === candidate.substring(candidate.length - 3)) return true;
            
        // Contient des mots cl√©s communs
        const commonKeywords = ['data', 'application', 'software', 'system', 'development', 'management', 'interface', 'logiciel', 'donn√©es', 'd√©veloppement', 'application', 'syst√®me', 'gestion'];
        for (const keyword of commonKeywords) {
          if (correct.includes(keyword) && candidate.includes(keyword)) return true;
        }
        
        return false;
      });
      
      // Combine les options similaires et s√©mantiques
      const candidateOptions = [...new Set([...relatedWords, ...similarWords])];
      shuffle(candidateOptions);
      
      // Prend les 3 meilleures options tricky
      trickyOptions.push(...candidateOptions.slice(0, 3));
      
      // Si pas assez d'options tricky, compl√®te avec des options al√©atoires
      while (trickyOptions.length < 3) {
        const remaining = allValues.filter(w => w !== correctAnswer && !trickyOptions.includes(w));
        shuffle(remaining);
        trickyOptions.push(remaining[0]);
      }
      
      const options = [correctAnswer, ...trickyOptions.slice(0, 3)];
      shuffle(options);
      return options;
    }
    
    // Mode normal : options moins difficiles
    const wrongOptions = allValues.filter(val => val !== correctAnswer);
    shuffle(wrongOptions);
    
    const options = [correctAnswer, ...wrongOptions.slice(0, 3)];
    shuffle(options);
    return options;
  };

  const getWordsForMode = (mode: keyof typeof QUIZ_MODES): string[] => {
    switch (mode) {
      case 'basic':
        return [...Object.keys(en_to_fr), ...Object.values(en_to_fr)];
      case 'expressions':
        return [...Object.keys(expressions_en_to_fr), ...Object.values(expressions_en_to_fr)];
      case 'exam':
        // MODE EXAMEN : TOUT le vocabulaire + expressions m√©lang√©s !
        return [...Object.keys(all_en_to_fr), ...Object.values(all_en_to_fr)];
      case 'quick':
        const quickWords = [...Object.keys(en_to_fr), ...Object.values(en_to_fr)];
        return quickWords.slice(0, 20);
      default:
        return [...Object.keys(all_en_to_fr), ...Object.values(all_en_to_fr)];
    }
  };

  const startQuiz = (mode: keyof typeof QUIZ_MODES) => {
    const selectedWords = getWordsForMode(mode);
    shuffle(selectedWords);
    setWords(selectedWords);
    setSelectedMode(mode);
    setCurrentIndex(0);
    setCorrect(0);
    setTotal(0);
    setStreak(0);
    setMaxStreak(0);
    setGameState('playing');
    nextQuestion(selectedWords, 0);
  };

  const nextQuestion = (wordList: string[] = words, index: number = currentIndex) => {
    if (index >= wordList.length) {
      setGameState('finished');
      return;
    }

    const word = wordList[index];
    let newPrompt: string, newAnswer: string;
    let isEnglishToFrench = false;

    if (word in all_en_to_fr) {
      newPrompt = `üá¨üáß ‚û°Ô∏è üá´üá∑ Traduisez: "${word}"`;
      newAnswer = all_en_to_fr[word as keyof typeof all_en_to_fr];
      isEnglishToFrench = true;
    } else {
      newPrompt = `üá´üá∑ ‚û°Ô∏è üá¨üáß Traduisez: "${word}"`;
      newAnswer = fr_to_en[word as keyof typeof fr_to_en];
      isEnglishToFrench = false;
    }

    const opts = generateOptions(newAnswer, isEnglishToFrench);
    setOptions(opts);
    setPrompt(newPrompt);
    setAnswer(newAnswer);
    setResult('');
    setShowHint(false);

    // Quick mode timer
    if (selectedMode === 'quick') {
      setTimeLeft(30);
    } else {
      setTimeLeft(null);
    }
  };

  const selectAnswer = (selected: string) => {
    if (timeLeft !== null && timeLeft <= 0) return;

    const isCorrect = selected.toLowerCase().trim() === answer.toLowerCase().trim();
    
    if (isCorrect) {
      setResult("‚úÖ Parfait ! üéâ");
      setCorrect(prev => prev + 1);
      const newStreak = streak + 1;
      setStreak(newStreak);
      setMaxStreak(Math.max(maxStreak, newStreak));
    } else {
      setResult(`‚ùå Oups ! La r√©ponse √©tait : ${answer}`);
      setStreak(0);
    }
    
    setTotal(prev => prev + 1);
    setCurrentIndex(prev => prev + 1);
    
    setTimeout(() => {
      nextQuestion();
    }, 2000);
  };

  const getScoreEmoji = (percentage: number): string => {
    if (percentage >= 95) return "üèÜ PARFAIT !";
    if (percentage >= 90) return "‚≠ê EXCELLENT !";
    if (percentage >= 80) return "üåü TR√àS BIEN !";
    if (percentage >= 70) return "üëç BIEN !";
    if (percentage >= 60) return "üìà EN PROGR√àS !";
    return "üí™ CONTINUEZ !";
  };

  // Timer effect for quick mode
  useEffect(() => {
    if (timeLeft === null || timeLeft <= 0) return;
    
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev === null || prev <= 1) {
          setResult("‚è∞ TEMPS √âCOUL√â !");
          setStreak(0);
          setTotal(prev => prev + 1);
          setCurrentIndex(prev => prev + 1);
          setTimeout(() => nextQuestion(), 2000);
          return null;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft]);

  // Menu Screen
  if (gameState === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-800 to-pink-700 flex flex-col items-center justify-center p-4">
        <div className="text-center mb-12">
          <h1 className="text-6xl font-bold text-white mb-4 animate-pulse">
            üöÄ Quiz Tech üöÄ
          </h1>
          <p className="text-xl text-gray-200 mb-8">
            Ma√Ætrisez le vocabulaire technique anglais-fran√ßais !
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl">
          {Object.entries(QUIZ_MODES).map(([key, mode]) => (
            <button
              key={key}
              onClick={() => startQuiz(key as keyof typeof QUIZ_MODES)}
              className={`${mode.color} hover:scale-105 transform transition-all duration-300 text-white font-bold py-6 px-8 rounded-2xl shadow-xl hover:shadow-2xl ${key === 'exam' ? 'ring-4 ring-yellow-400 animate-pulse' : ''}`}
            >
              <div className="text-4xl mb-3">{mode.icon}</div>
              <div className="text-lg">{mode.name}</div>
              {key === 'quick' && <div className="text-sm mt-2 opacity-80">30 sec/question</div>}
              {key === 'challenge' && <div className="text-sm mt-2 opacity-80">Sans indices</div>}
              {key === 'exam' && (
                <div className="text-sm mt-2 opacity-90">
                  <div>üéØ Questions TR√àS difficiles</div>
                  <div>üìö Tout le vocabulaire</div>
                  <div>üî• Comme √† l'examen !</div>
                </div>
              )}
            </button>
          ))}
        </div>

        <div className="mt-8">
          <a
            href="/about"
            className="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-full backdrop-blur-sm transition-all duration-300"
          >
            üë§ √Ä propos de Romain
          </a>
        </div>
      </div>
    );
  }

  // Game Screen
  if (gameState === 'playing') {
    const progress = (currentIndex / words.length) * 100;
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-indigo-800 to-purple-700 flex flex-col items-center justify-center p-4">
        {/* Header */}
        <div className="w-full max-w-4xl mb-8">
          <div className="flex justify-between items-center mb-4">
            <div className="text-white">
              <span className="text-2xl font-bold">üèÜ {correct}/{total}</span>
              <span className="text-lg ml-4">üî• S√©rie: {streak}</span>
            </div>
            <div className="text-white">
              <span className="text-lg">{QUIZ_MODES[selectedMode].icon} {QUIZ_MODES[selectedMode].name}</span>
            </div>
          </div>
          
          {/* Progress bar */}
          <div className="w-full bg-white/20 rounded-full h-4 overflow-hidden">
            <div 
              className="h-full bg-gradient-to-r from-green-400 to-blue-500 transition-all duration-500 flex items-center justify-center"
              style={{ width: `${progress}%` }}
            >
              <span className="text-xs text-white font-bold">
                {Math.round(progress)}%
              </span>
            </div>
          </div>
          
          {timeLeft !== null && (
            <div className="mt-4 text-center">
              <div className={`text-2xl font-bold ${timeLeft <= 10 ? 'text-red-300 animate-pulse' : 'text-white'}`}>
                ‚è∞ {timeLeft}s
              </div>
            </div>
          )}
        </div>

        {/* Question */}
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 max-w-4xl w-full mb-8">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-white mb-4">
              Question {currentIndex + 1}/{words.length}
            </h2>
            <p className="text-xl text-gray-100 leading-relaxed">{prompt}</p>
          </div>

          {/* Hint button for non-challenge and non-exam modes */}
          {selectedMode !== 'challenge' && selectedMode !== 'exam' && answer.length > 10 && (
            <div className="text-center mb-4">
              <button
                onClick={() => setShowHint(!showHint)}
                className="bg-yellow-500/30 hover:bg-yellow-500/50 text-yellow-100 px-4 py-2 rounded-lg transition-all duration-300"
              >
                üí° {showHint ? 'Masquer l\'indice' : 'Afficher un indice'}
              </button>
              {showHint && (
                <div className="mt-2 text-yellow-200">
                  Indice: {answer.substring(0, 3)}...{answer.substring(answer.length - 2)}
                </div>
              )}
            </div>
          )}

          {/* Warning sp√©cial pour le mode EXAMEN */}
          {selectedMode === 'exam' && (
            <div className="text-center mb-4 bg-red-500/20 rounded-lg p-3">
              <div className="text-red-200 text-sm">
                üéì <strong>MODE EXAMEN</strong> - Questions tr√®s difficiles, pas d'indices !
              </div>
            </div>
          )}

          {/* Options */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {options.map((option, index) => (
              <button
                key={index}
                onClick={() => selectAnswer(option)}
                disabled={!!result}
                className="bg-white/20 hover:bg-white/30 disabled:opacity-50 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 hover:scale-105 text-left"
              >
                <span className="text-lg">
                  {String.fromCharCode(65 + index)}. {option}
                </span>
              </button>
            ))}
          </div>

          {/* Result */}
          {result && (
            <div className="text-center mt-6">
              <p className="text-xl font-bold text-white mb-4">{result}</p>
              {streak >= 5 && streak % 5 === 0 && (
                <div className="text-orange-300 animate-bounce">
                  üî• S√âRIE DE FEU ! +{streak} üî•
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    );
  }

  // Results Screen
  if (gameState === 'finished') {
    const percentage = total > 0 ? (correct / total) * 100 : 0;
    const scoreEmoji = getScoreEmoji(percentage);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-900 via-emerald-800 to-teal-700 flex flex-col items-center justify-center p-4">
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 max-w-2xl w-full text-center">
          <h1 className="text-4xl font-bold text-white mb-6">üéä Quiz Termin√© ! üéä</h1>
          
          <div className="text-6xl mb-6">{scoreEmoji.split(' ')[0]}</div>
          <div className="text-2xl font-bold text-white mb-8">{scoreEmoji}</div>
          
          <div className="grid grid-cols-2 gap-6 mb-8">
            <div className="bg-white/20 rounded-2xl p-4">
              <div className="text-3xl font-bold text-white">{correct}/{total}</div>
              <div className="text-gray-200">Score</div>
            </div>
            <div className="bg-white/20 rounded-2xl p-4">
              <div className="text-3xl font-bold text-white">{percentage.toFixed(1)}%</div>
              <div className="text-gray-200">R√©ussite</div>
            </div>
            <div className="bg-white/20 rounded-2xl p-4">
              <div className="text-3xl font-bold text-white">{maxStreak}</div>
              <div className="text-gray-200">Meilleure s√©rie</div>
            </div>
            <div className="bg-white/20 rounded-2xl p-4">
              <div className="text-3xl font-bold text-white">{QUIZ_MODES[selectedMode].icon}</div>
              <div className="text-gray-200 text-sm">{QUIZ_MODES[selectedMode].name}</div>
            </div>
          </div>

          <div className="space-y-4">
            <button
              onClick={() => startQuiz(selectedMode)}
              className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 hover:scale-105 mr-4"
            >
              üîÑ Rejouer
            </button>
            <button
              onClick={() => setGameState('menu')}
              className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 hover:scale-105"
            >
              üè† Menu principal
            </button>
          </div>
        </div>
      </div>
    );
  }

  return null;
}
